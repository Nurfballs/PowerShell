param([string]$ComputerName) # ----------------------------------------------# Define executible locations# ----------------------------------------------$ScriptPath = "C:\Hotline\Scripts\PowerShell for XP"$psExec = "$ScriptPath\psexec.exe"$dotNetFramework = "$ScriptPath\NetFx20SP1_x86.exe"$WindowsManagementFamework = "$ScriptPath\WindowsXP-KB968930-x86-ENG.exe"    $VerbosePreference = "Continue"    # ------------------------------------------------    # Pre-requisite check    # ------------------------------------------------    Write-Output "Begin Pre-requisite check"        #Make sure the remote computer is Winodws XP.    Write-Verbose "Checking Operating System Version..."    Write-Log -type "INFO" -msg "Checking operating system version"    $OS = Get-WmiObject Win32_OperatingSystem -Computername $ComputerName    if ($OS.Version -notmatch "5.1")    {         Write-Log -type "ERROR" -msg "Remote computer is not Windows XP. Exiting script."         Write-Error "Remote computer is not Windows XP. Exiting script." -ErrorAction Continue                           }    else {    Write-Log -type "OK" -msg "Windows XP detected."    #Check if PowerShell is already installed.    Write-Verbose "Checking if PowerShell already installed..."    Write-Log -type "INFO" -msg "Checking if Powershell is already installed"    try     {        $Registry = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey("LocalMachine", $ComputerName)        $RegKey_PowerShell = $registry.OpenSubKey("Software\Microsoft\Powershell\1")        $RegVal_PowerShell = $RegKey_PowerShell.GetValue("Install")        if ($RegVal_PowerShell -eq "1")        {            Write-Log -type "INFO" -msg "Powershell detected."            $PowerShellInstalled = $True        }        else        {            $PowerShellInstalled = $False        }    }     catch     {        $PowerShellInstalled = $False        Write-Output "PowerShell not installed"        Write-Log -type "OK" -msg "Powershell not installed."    }        # If powershell installed, check which version it is        if ($PowerShellInstalled -eq $True)    {        Write-Verbose "Checking PowerShell Version..."        Write-Log -type "INFO" -msg "Checking Powershell version"        $Registry = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey("LocalMachine", $ComputerName)        $RegKey_PowerShell = $registry.OpenSubKey("Software\Microsoft\Powershell\1\PowerShellEngine")        $RegVal_PowerShell = $RegKey_PowerShell.GetValue("PowerShellVersion")        $PowerShellVersion = $RegVal_PowerShell                if ($PowerShellVersion -eq "2.0")        {            Write-Error "Powershell 2.0 already installed. Exiting script." -ErrorAction Continue            Write-Log -type "OK" -msg "Powershell 2.0 already installed. Exiting script."                    }        elseif ($PowerShellVersion -eq "")         {            Write-Verbose "Powershell appears to be installed, but the version number was unable to be determined."            Write-Verbose "Gonna try installing version 2.0 anyway."            Write-Log -type "INFO" -msg "Powershell appears to be installed, but the version number was unabel to be determined."            Write-Log -type "INFO" -msg "Trying to install Powershell 2.0 anyway."                   }    }    # Install Powershell 2.0    Write-Output "Installing PowerShell 2.0..."    Write-Log -type "INFO" -msg "Installing Powershell 2.0"    # Check if Service Pack 3 is installed.    Write-Verbose "Checking for Windows XP Service Pack 3..."    Write-Log -type "INFO" -msg "Checking if Windows XP Service Pack 3 is installed."    $Registry = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey("LocalMachine", $ComputerName)    $RegKey_PowerShell = $registry.OpenSubKey("Software\Microsoft\Windows NT\CurrentVersion")    $RegVal_PowerShell = $RegKey_PowerShell.GetValue("CSDVersion")    $ServicePackVersion = $RegVal_PowerShell        if ($ServicePackVersion -notmatch "Service Pack 3")    {        Write-Log -type "ERROR" -msg "Windows XP Service Pack 3 is not installed. Install Service Pack 3 and run the script again."        Write-Log -type "ERROR" -msg "Exiting script."        Write-Error "It appears you are using Windows XP, but without Service Pack 3. Please install Service Pack 3 and try again." -ErrorAction Continue            }    Write-Verbose "Windows XP Service Pack 3 installed."    Write-Log -type "OK" -msg "Windows XP Service Pack 3 is installed."    #Check if .NET Framework 2.0 installed (at least SP1)    Write-Verbose "Checking for .NET Framework 2.0 SP1"    Write-Log -type "INFO" -msg "Checking for.NET Framework 2.0 SP1"    try    {        $Registry = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey("LocalMachine", $ComputerName)        $RegKey_PowerShell = $registry.OpenSubKey("Software\Microsoft\NET Framework Setup\NDP\v2.0.50727")        $RegVal_PowerShell = $RegKey_PowerShell.GetValue("SP")        $NetFrameworkVersion = $RegVal_PowerShell        if ($NetFrameworkVersion -ne "" -or $NetFrameworkVersion -ne "0")        {            Write-Verbose ".Net Framework 2.0 SP1 or greater installed"            Write-Log -type "OK" -msg ".NET Framewok 2.0 SP1 or greater is already installed."            $NETFrameworkInstalled = $True        }        else        {            Write-Verbose ".NET Framework 2.0 SP1 is not installed."            Write-Log -type "INFO" -msg ".NET Framework 2.0 SP1 is not installed."            $NETFrameworkInstalled = $False        }    }    catch    {        Write-Verbose ".NET Framework 2.0 SP1 not installed."        Write-Log -type "INFO" -msg ".NET Framework 2.0 SP1 is not installed."        $NETFrameworkInstalled = $False    }    # Download PSExec    if (!(Test-Path $psexec))    {        Write-Output "psexec.exe not found."
        $ZipFile = $ScriptPath + "\sysinternalssuite.zip"

        if (!(Test-Path $ZipFile))
        {
            Write-Output "Downloading SysinternalsSuite.zip"
    
            $Source = 'http://download.sysinternals.com/files/SysinternalsSuite.zip'
            Invoke-WebRequest -uri $Source -OutFile $ZipFile
            Unblock-File $ZipFile

            Write-Output "Unzipping SysInternalSuite.zip"
            $shellApplication = new-object -com shell.application 
            $zipPackage = $shellApplication.NameSpace($zipfilename) 
            $destinationFolder = $shellApplication.NameSpace($destination) 

            $items = $zipPackage.Items()

            foreach($item in $items) {
                $strItem = [string]$item.name
                if ($strItem -like "psexec.exe") { $destinationFolder.CopyHere($item) }
            }
    }

    
        }    # Install .NET Framework 2.0 SP1    if ($NETFrameworkInstalled -eq $False)    {        Write-Output "Installing .NET Framework 2.0 SP1..."        Write-Log -type "INFO" -msg "Installing .NET Framework 2.0 SP1."        &$psexec /AcceptEULA \\$ComputerName -c -f $dotNetFramework /q /norestart            }        # === Confirm registry permissions are correct (Resolve error 1606 on Powershell install) ===    Write-Output "HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Svchost [1 5 7 11 17]" > "$ScriptPath\reg-acl.txt"    Write-Log -type "INFO" -msg "Setting ACL on svchost registry key"    regini -m \\$ComputerName "$ScriptPath\reg-acl.txt"    # Install Powershell 2.0    Write-Output "Installing PowerShell 2.0 ..."    Write-Log -type "INFO" -msg "Installing Powershell 2.0"     &$psexec /AcceptEULA \\$ComputerName -c -f $WindowsManagementFamework /quiet /passive /norestart        # Set WindowsManagement service startup to automatic    Write-Log -type "INFO" -msg "Setting WinRM service to start automatically"    Write-Output "Setting Windows Remote Management Service (WS-Management) startup to Automatic"    Set-Service -ComputerName $ComputerName -Name WinRM -StartupType Automatic    # Start the service    Write-Output "Starting Windows Remote Management Service"    Write-Log -type "INFO" -msg "Starting Windows Remote Management service"    (Get-WmiObject -ComputerName $ComputerName -Class Win32_Service -Filter "Name='WinRM'").StartService() > $null        Write-Log -type INFO -msg "Script Complete!"     #Send-MailMessage -to "casey@hotlineit.com" -from "powershell@colcrawford.com.au" -subject "Powershell Script" -body "Script completed successfully on $ComputerName" -smtpserver "SVR-CCM-EXCH"}Function Write-Log {    param(        [string]$msg,        [string]$type    )           # Dim Variables    $Date = Get-Date -format "yyyy-MM-dd"    $LogFile = "C:\Hotline\Scripts\Logs\$date-$ComputerName-InstallPowershell.log"     # Make the log file if it doesnt exist.    if (!(test-path $LogFile)) { New-Item $LogFile -type file -force }     # Write to the log file        Add-Content $LogFile "$(get-date -format 'yyyy-MM-dd HH:mm:ss') [$($type.toupper())]: $msg"}